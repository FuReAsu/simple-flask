name: simple-flask
run-name: ${{ github.actor }} has performed ${{ github.event_name }} to ${{ github.ref_name }} deploying staging
on:
  push:
    branches:
      - 'main'

jobs:
  test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run Test
        run: pytest -v

  build:
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Build docker image
        run: docker build -t ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/simple-flask:${GITHUB_SHA::8} .
      - name: Login to ECR
        run: aws ecr get-login-password | docker login -u AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com 
      - name: Push image to ECR
        run: docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/simple-flask:${GITHUB_SHA::8}

  deploy:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Inject env into task-definition json
        run: |
          export APP_PORT="5080"
          export APP_DATA_PATH="/data"
          export APP_LOG_PATH="/log"
          export ECR_IMAGE_TAG=${GITHUB_SHA::8}
          export AWS_EFS_ID=${{ vars.AWS_EFS_ID }}
          export AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}
          envsubst < ecs-task-definition-template.json > ecs-task-def.json
      - name: Apply the task definition to ECS
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://ecs-task-def.json
      - name: Update Service
        run: |
          LATEST_TASK_DEF=$(aws ecs list-task-definitions \
            --family-prefix simple-flask \
            --sort DESC \
            --max-results 1 \
            --query "taskDefinitionArns[0]" \
            --output text)
          aws ecs update-service \
            --cluster deployment \
            --service simple-flask \
            --task-definition $LATEST_TASK_DEF
